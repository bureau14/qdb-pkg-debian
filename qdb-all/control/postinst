#!/bin/sh

set -e

# [api]
ln -sf libqdb_api-$QDB_VERSION.so /usr/lib/libqdb_api.so
ln -sf qdb-$QDB_VERSION /usr/include/qdb

ldconfig


# [others]
USER="qdb"
GROUP="$USER"
ETC_PATH=/etc/qdb
SHARE_PATH=/usr/share/qdb
DB_PATH=/var/lib/qdb
LOG_PATH=/var/log/qdb
LOG_PATH_WEB_BRIDGE=/var/log/qdb_http
WWW_PATH=/usr/share/qdb/www
SHARE_PATH=/usr/share/qdb

# Database
mkdir -p $DB_PATH
chown $USER:$GROUP $DB_PATH

# Log
mkdir -p $LOG_PATH
touch $LOG_PATH/qdbd.log
chown -R $USER:$GROUP $LOG_PATH
mkdir -p $LOG_PATH_WEB_BRIDGE
chown -R $USER:$GROUP $LOG_PATH_WEB_BRIDGE

# share
mkdir -p $SHARE_PATH
chown -R $USER:$GROUP $SHARE_PATH

# configuration dir
mkdir -p $ETC_PATH

# key generation
if [ ! -e $ETC_PATH/cluster_private.key ]
then
    qdb_cluster_keygen -s $ETC_PATH/cluster_private.key -p $SHARE_PATH/cluster_public.key
    chown $USER:$GROUP $ETC_PATH/cluster_private.key
    chown $USER:$GROUP $SHARE_PATH/cluster_public.key
    chmod 0600 $ETC_PATH/cluster_private.key
    chmod 0644 $SHARE_PATH/cluster_public.key
else
    echo "Cluster keys already exist."
fi

# add user for qdb_httpd
QDB_USER="qdb_httpd"

if [ ! -e $ETC_PATH/${QDB_USER}_private.key ]
then
    qdb_user_add -u $QDB_USER -p $ETC_PATH/users.conf -s $ETC_PATH/${QDB_USER}_private.key
    chown $USER:$GROUP $ETC_PATH/${QDB_USER}_private.key
    chmod 0600 $ETC_PATH/${QDB_USER}_private.key
else
    echo "User $QDB_USER already exists."
fi

# add user for qdbsh
QDB_USER="qdbsh"

if [ ! -e $ETC_PATH/${QDB_USER}_private.key ]
then
    qdb_user_add -u $QDB_USER -p $ETC_PATH/users.conf -s $ETC_PATH/${QDB_USER}_private.key
    chown $USER:$GROUP $ETC_PATH/${QDB_USER}_private.key
    chmod 0600 $ETC_PATH/${QDB_USER}_private.key
else
    echo "User $QDB_USER already exists."
fi

# Config
[ -e $ETC_PATH/qdbd.conf ] || qdbd --gen-config --daemonize --log-directory=$LOG_PATH --root=$DB_PATH --security=true --cluster-private-file=$ETC_PATH/cluster_private.key --user-list=$ETC_PATH/users.conf > $ETC_PATH/qdbd.conf

# set up with security
[ -e $ETC_PATH/qdb_httpd.conf ] || qdb_httpd --gen-config --daemonize --log-directory=$LOG_PATH_WEB_BRIDGE --root=$WWW_PATH --cluster-public-key-file=$SHARE_PATH/cluster_public.key --user-credentials-file=$ETC_PATH/qdb_httpd_private.key > $ETC_PATH/qdb_httpd.conf

chown root:root /usr/share/qdb/upstart/qdb_httpd.conf

sysctl -e -q -p /etc/sysctl.d/30-quasardb.conf 2>&1 || true

chown root:root /usr/share/qdb/upstart/qdbd.conf

# Configure API Rest
openssl req -newkey rsa:4096 -nodes -sha512 -x509 -days 3650 -nodes -out $ETC_PATH/rest-api.cert.pem -keyout $ETC_PATH/rest-api.key.pem -subj "/C=FR/L=Paris/O=Quasardb/CN=Quasardb" >/dev/null 2>&1
if [ ! -f $ETC_PATH/qdb-api-rest.cfg ]; then
    cp /usr/share/qdb/default.cfg /etc/qdb/qdb-api-rest.cfg
fi


if ps -p1 | grep -q systemd; then
    # caution: systemd doesn't follow symlink
    cp -f /usr/share/qdb/systemd/qdbd.service /etc/systemd/system/qdbd.service
    cp -f /usr/share/qdb/systemd/qdb_httpd.service /etc/systemd/system/qdb_httpd.service
    cp -f /usr/share/qdb/systemd/qdb_api_rest.service /etc/systemd/system/qdb_api_rest.service

    systemctl daemon-reload

    systemctl -q enable qdbd.service
    systemctl start qdbd.service

    systemctl -q enable qdb_httpd.service
    systemctl start qdb_httpd.service

    systemctl -q enable qdb_api_rest.service
    systemctl start qdb_api_rest.service
else
    ln -sf /usr/share/qdb/upstart/qdbd.conf /etc/init/qdbd.conf
    ln -sf /usr/share/qdb/upstart/qdb_httpd.conf /etc/init/qdb_httpd.conf
    ln -sf /usr/share/qdb/upstart/qdb_api_rest.conf /etc/init/qdb_api_rest.conf

    initctl reload-configuration
    
    initctl start qdbd
    initctl start qdb_httpd
    initctl start qdb_api_rest
fi
